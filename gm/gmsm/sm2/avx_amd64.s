//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

TEXT ·_set_i64(SB), $0-16

	MOVQ a+0(FP), DI
	MOVQ b+8(FP), SI

	LONG $0x6ef9e1c4; BYTE $0xc6 // vmovq    xmm0, rsi
	LONG $0x6ef9e1c4; BYTE $0xcf // vmovq    xmm1, rdi
	LONG $0xc06cf1c5             // vpunpcklqdq    xmm0, xmm1, xmm0
	RET

TEXT ·_store_i64(SB), $0-32

	MOVQ a+0(FP), DI
	MOVQ b+8(FP), SI
	MOVQ c+16(FP), DX
	MOVQ d+24(FP), CX

	WORD $0x6348; BYTE $0xc2                   // movsxd    rax, edx
	LONG $0x04d6f9c5; BYTE $0xc7               // vmovq    qword [rdi + 8*rax], xmm0
	LONG $0x16f9e3c4; WORD $0xc604; BYTE $0x01 // vpextrq    qword [rsi + 8*rax], xmm0, 1
	RET

TEXT ·_sm2P256Mul2Way1(SB), $0-48

	MOVQ tmp+0(FP), DI
	MOVQ a+8(FP), SI
	MOVQ b+16(FP), DX
	MOVQ tmp2+24(FP), CX
	MOVQ a2+32(FP), R8
	MOVQ b2+40(FP), R9

	WORD $0x8b44; BYTE $0x36                   // mov    r14d, dword [rsi]
	WORD $0x8b45; BYTE $0x10                   // mov    r10d, dword [r8]
	LONG $0x6ef9c1c4; BYTE $0xc2               // vmovq    xmm0, r10
	LONG $0x6ef9c1c4; BYTE $0xce               // vmovq    xmm1, r14
	LONG $0xf06cf1c5                           // vpunpcklqdq    xmm6, xmm1, xmm0
	WORD $0x8b44; BYTE $0x3a                   // mov    r15d, dword [rdx]
	WORD $0x8b45; BYTE $0x19                   // mov    r11d, dword [r9]
	LONG $0x6ef9c1c4; BYTE $0xc3               // vmovq    xmm0, r11
	LONG $0x6ef9c1c4; BYTE $0xcf               // vmovq    xmm1, r15
	LONG $0xd06c71c5                           // vpunpcklqdq    xmm10, xmm1, xmm0
	LONG $0xc6f4a9c5                           // vpmuludq    xmm0, xmm10, xmm6
	LONG $0x07d6f9c5                           // vmovq    qword [rdi], xmm0
	LONG $0x16f9e3c4; WORD $0x0101             // vpextrq    qword [rcx], xmm0, 1
	WORD $0x468b; BYTE $0x04                   // mov    eax, dword [rsi + 4]
	LONG $0x04588b41                           // mov    ebx, dword [r8 + 4]
	LONG $0x6ef9e1c4; BYTE $0xc3               // vmovq    xmm0, rbx
	LONG $0x6ef9e1c4; BYTE $0xc8               // vmovq    xmm1, rax
	LONG $0xe86c71c5                           // vpunpcklqdq    xmm13, xmm1, xmm0
	WORD $0x428b; BYTE $0x04                   // mov    eax, dword [rdx + 4]
	LONG $0x04598b41                           // mov    ebx, dword [r9 + 4]
	LONG $0x6ef9e1c4; BYTE $0xc3               // vmovq    xmm0, rbx
	LONG $0x6ef9e1c4; BYTE $0xc8               // vmovq    xmm1, rax
	LONG $0xf86c71c5                           // vpunpcklqdq    xmm15, xmm1, xmm0
	LONG $0xc6f481c5                           // vpmuludq    xmm0, xmm15, xmm6
	LONG $0xf411c1c4; BYTE $0xca               // vpmuludq    xmm1, xmm13, xmm10
	LONG $0xc1d4f9c5                           // vpaddq    xmm0, xmm0, xmm1
	LONG $0x47d6f9c5; BYTE $0x08               // vmovq    qword [rdi + 8], xmm0
	LONG $0x16f9e3c4; WORD $0x0841; BYTE $0x01 // vpextrq    qword [rcx + 8], xmm0, 1
	WORD $0x468b; BYTE $0x08                   // mov    eax, dword [rsi + 8]
	LONG $0x08588b41                           // mov    ebx, dword [r8 + 8]
	LONG $0x6ef9e1c4; BYTE $0xc3               // vmovq    xmm0, rbx
	LONG $0x6ef9e1c4; BYTE $0xc8               // vmovq    xmm1, rax
	LONG $0xd86c71c5                           // vpunpcklqdq    xmm11, xmm1, xmm0
	WORD $0x428b; BYTE $0x08                   // mov    eax, dword [rdx + 8]
	LONG $0x08598b41                           // mov    ebx, dword [r9 + 8]
	LONG $0x6ef9e1c4; BYTE $0xc3               // vmovq    xmm0, rbx
	LONG $0x6ef9e1c4; BYTE $0xc8               // vmovq    xmm1, rax
	LONG $0xc06c71c5                           // vpunpcklqdq    xmm8, xmm1, xmm0
	LONG $0xc6f4b9c5                           // vpmuludq    xmm0, xmm8, xmm6
	LONG $0xf401c1c4; BYTE $0xcd               // vpmuludq    xmm1, xmm15, xmm13
	LONG $0xc9d4f1c5                           // vpaddq    xmm1, xmm1, xmm1
	LONG $0xf421c1c4; BYTE $0xe2               // vpmuludq    xmm4, xmm11, xmm10
	LONG $0xc0d4d9c5                           // vpaddq    xmm0, xmm4, xmm0
	LONG $0xc0d4f1c5                           // vpaddq    xmm0, xmm1, xmm0
	LONG $0x47d6f9c5; BYTE $0x10               // vmovq    qword [rdi + 16], xmm0
	LONG $0x16f9e3c4; WORD $0x1041; BYTE $0x01 // vpextrq    qword [rcx + 16], xmm0, 1
	LONG $0x0c6e8b44                           // mov    r13d, dword [rsi + 12]
	LONG $0x0c608b45                           // mov    r12d, dword [r8 + 12]
	LONG $0x6ef9c1c4; BYTE $0xc4               // vmovq    xmm0, r12
	LONG $0x6ef9c1c4; BYTE $0xcd               // vmovq    xmm1, r13
	LONG $0xe86cf1c5                           // vpunpcklqdq    xmm5, xmm1, xmm0
	WORD $0x428b; BYTE $0x0c                   // mov    eax, dword [rdx + 12]
	LONG $0x0c598b41                           // mov    ebx, dword [r9 + 12]
	LONG $0x6ef9e1c4; BYTE $0xc3               // vmovq    xmm0, rbx
	LONG $0x6ef9e1c4; BYTE $0xc8               // vmovq    xmm1, rax
	LONG $0xc86c71c5                           // vpunpcklqdq    xmm9, xmm1, xmm0
	LONG $0xc6f4b1c5                           // vpmuludq    xmm0, xmm9, xmm6
	LONG $0xf439c1c4; BYTE $0xcd               // vpmuludq    xmm1, xmm8, xmm13
	LONG $0xf421c1c4; BYTE $0xe7               // vpmuludq    xmm4, xmm11, xmm15
	LONG $0xccd4f1c5                           // vpaddq    xmm1, xmm1, xmm4
	LONG $0xe5f4a9c5                           // vpmuludq    xmm4, xmm10, xmm5
	LONG $0xc0d4d9c5                           // vpaddq    xmm0, xmm4, xmm0
	LONG $0xc0d4f1c5                           // vpaddq    xmm0, xmm1, xmm0
	LONG $0x47d6f9c5; BYTE $0x18               // vmovq    qword [rdi + 24], xmm0
	LONG $0x16f9e3c4; WORD $0x1841; BYTE $0x01 // vpextrq    qword [rcx + 24], xmm0, 1
	WORD $0x468b; BYTE $0x10                   // mov    eax, dword [rsi + 16]
	LONG $0x10588b41                           // mov    ebx, dword [r8 + 16]
	LONG $0x6ef9e1c4; BYTE $0xc3               // vmovq    xmm0, rbx
	LONG $0x6ef9e1c4; BYTE $0xc8               // vmovq    xmm1, rax
	LONG $0xf06c71c5                           // vpunpcklqdq    xmm14, xmm1, xmm0
	WORD $0x5a8b; BYTE $0x10                   // mov    ebx, dword [rdx + 16]
	LONG $0x10418b41                           // mov    eax, dword [r9 + 16]
	LONG $0x6ef9e1c4; BYTE $0xc0               // vmovq    xmm0, rax
	LONG $0x6ef9e1c4; BYTE $0xcb               // vmovq    xmm1, rbx
	LONG $0xe06c71c5                           // vpunpcklqdq    xmm12, xmm1, xmm0
	LONG $0xf431c1c4; BYTE $0xcd               // vpmuludq    xmm1, xmm9, xmm13
	LONG $0xe5f481c5                           // vpmuludq    xmm4, xmm15, xmm5
	LONG $0xccd4f1c5                           // vpaddq    xmm1, xmm1, xmm4
	LONG $0xc9d4f1c5                           // vpaddq    xmm1, xmm1, xmm1
	LONG $0xe6f499c5                           // vpmuludq    xmm4, xmm12, xmm6
	LONG $0xf439c1c4; BYTE $0xc3               // vpmuludq    xmm0, xmm8, xmm11
	LONG $0xf409c1c4; BYTE $0xd2               // vpmuludq    xmm2, xmm14, xmm10
	LONG $0xc2d4f9c5                           // vpaddq    xmm0, xmm0, xmm2
	LONG $0xc4d4f9c5                           // vpaddq    xmm0, xmm0, xmm4
	LONG $0xc0d4f1c5                           // vpaddq    xmm0, xmm1, xmm0
	LONG $0x47d6f9c5; BYTE $0x20               // vmovq    qword [rdi + 32], xmm0
	LONG $0x16f9e3c4; WORD $0x2041; BYTE $0x01 // vpextrq    qword [rcx + 32], xmm0, 1
	LONG $0x14688b41                           // mov    ebp, dword [r8 + 20]
	LONG $0x6ef9e1c4; BYTE $0xc5               // vmovq    xmm0, rbp
	WORD $0x6e8b; BYTE $0x14                   // mov    ebp, dword [rsi + 20]
	LONG $0x6ef9e1c4; BYTE $0xcd               // vmovq    xmm1, rbp
	LONG $0xc86cf1c5                           // vpunpcklqdq    xmm1, xmm1, xmm0
	LONG $0x14698b41                           // mov    ebp, dword [r9 + 20]
	LONG $0x6ef9e1c4; BYTE $0xc5               // vmovq    xmm0, rbp
	WORD $0x6a8b; BYTE $0x14                   // mov    ebp, dword [rdx + 20]
	LONG $0x6ef9e1c4; BYTE $0xd5               // vmovq    xmm2, rbp
	LONG $0xe06ce9c5                           // vpunpcklqdq    xmm4, xmm2, xmm0
	LONG $0xc6f4d9c5                           // vpmuludq    xmm0, xmm4, xmm6
	LONG $0xf419c1c4; BYTE $0xd5               // vpmuludq    xmm2, xmm12, xmm13
	LONG $0xf431c1c4; BYTE $0xfb               // vpmuludq    xmm7, xmm9, xmm11
	LONG $0xddf4b9c5                           // vpmuludq    xmm3, xmm8, xmm5
	LONG $0xdbd4c1c5                           // vpaddq    xmm3, xmm7, xmm3
	LONG $0xf409c1c4; BYTE $0xff               // vpmuludq    xmm7, xmm14, xmm15
	LONG $0xd2d4c1c5                           // vpaddq    xmm2, xmm7, xmm2
	LONG $0xd2d4e1c5                           // vpaddq    xmm2, xmm3, xmm2
	LONG $0xd9f4a9c5                           // vpmuludq    xmm3, xmm10, xmm1
	LONG $0xc0d4e1c5                           // vpaddq    xmm0, xmm3, xmm0
	LONG $0xc0d4e9c5                           // vpaddq    xmm0, xmm2, xmm0
	LONG $0x47d6f9c5; BYTE $0x28               // vmovq    qword [rdi + 40], xmm0
	LONG $0x16f9e3c4; WORD $0x2841; BYTE $0x01 // vpextrq    qword [rcx + 40], xmm0, 1
	LONG $0x18688b41                           // mov    ebp, dword [r8 + 24]
	LONG $0x6ef9e1c4; BYTE $0xc5               // vmovq    xmm0, rbp
	WORD $0x6e8b; BYTE $0x18                   // mov    ebp, dword [rsi + 24]
	LONG $0x6ef9e1c4; BYTE $0xd5               // vmovq    xmm2, rbp
	LONG $0x18698b41                           // mov    ebp, dword [r9 + 24]
	LONG $0x6ef9e1c4; BYTE $0xdd               // vmovq    xmm3, rbp
	WORD $0x6a8b; BYTE $0x18                   // mov    ebp, dword [rdx + 24]
	LONG $0x6ef9e1c4; BYTE $0xfd               // vmovq    xmm7, rbp
	LONG $0xc06ce9c5                           // vpunpcklqdq    xmm0, xmm2, xmm0
	LONG $0xd36cc1c5                           // vpunpcklqdq    xmm2, xmm7, xmm3
	LONG $0xdcf491c5                           // vpmuludq    xmm3, xmm13, xmm4
	LONG $0xfdf4b1c5                           // vpmuludq    xmm7, xmm9, xmm5
	LONG $0xe9f481c5                           // vpmuludq    xmm5, xmm15, xmm1
	LONG $0xefd4d1c5                           // vpaddq    xmm5, xmm5, xmm7
	LONG $0xdbd4d1c5                           // vpaddq    xmm3, xmm5, xmm3
	LONG $0xdbd4e1c5                           // vpaddq    xmm3, xmm3, xmm3
	LONG $0xeef4e9c5                           // vpmuludq    xmm5, xmm2, xmm6
	LONG $0xf419c1c4; BYTE $0xfb               // vpmuludq    xmm7, xmm12, xmm11
	LONG $0xf409c1c4; BYTE $0xf0               // vpmuludq    xmm6, xmm14, xmm8
	LONG $0xf6d4c1c5                           // vpaddq    xmm6, xmm7, xmm6
	LONG $0xf8f4a9c5                           // vpmuludq    xmm7, xmm10, xmm0
	LONG $0xf7d4c9c5                           // vpaddq    xmm6, xmm6, xmm7
	LONG $0xedd4c9c5                           // vpaddq    xmm5, xmm6, xmm5
	LONG $0xddd4e1c5                           // vpaddq    xmm3, xmm3, xmm5
	LONG $0x5fd6f9c5; BYTE $0x30               // vmovq    qword [rdi + 48], xmm3
	LONG $0x16f9e3c4; WORD $0x3059; BYTE $0x01 // vpextrq    qword [rcx + 48], xmm3, 1
	LONG $0xd2f491c5                           // vpmuludq    xmm2, xmm13, xmm2
	LONG $0xdcf4a1c5                           // vpmuludq    xmm3, xmm11, xmm4
	LONG $0xf409c1c4; BYTE $0xe1               // vpmuludq    xmm4, xmm14, xmm9
	LONG $0xc9f4b9c5                           // vpmuludq    xmm1, xmm8, xmm1
	LONG $0xccd4f1c5                           // vpaddq    xmm1, xmm1, xmm4
	LONG $0xc0f481c5                           // vpmuludq    xmm0, xmm15, xmm0
	LONG $0xc0d4e1c5                           // vpaddq    xmm0, xmm3, xmm0
	LONG $0xc0d4f1c5                           // vpaddq    xmm0, xmm1, xmm0
	LONG $0xc2d4f9c5                           // vpaddq    xmm0, xmm0, xmm2
	LONG $0x47d6f9c5; BYTE $0x38               // vmovq    qword [rdi + 56], xmm0
	LONG $0x16f9e3c4; WORD $0x3841; BYTE $0x01 // vpextrq    qword [rcx + 56], xmm0, 1
	LONG $0xddaf0f41                           // imul    ebx, r13d
	WORD $0x528b; BYTE $0x1c                   // mov    edx, dword [rdx + 28]
	LONG $0xd6af0f41                           // imul    edx, r14d
	WORD $0xda01                               // add    edx, ebx
	WORD $0x768b; BYTE $0x1c                   // mov    esi, dword [rsi + 28]
	LONG $0xf7af0f41                           // imul    esi, r15d
	WORD $0xd601                               // add    esi, edx
	LONG $0x38770148                           // add    qword [rdi + 56], rsi
	LONG $0xc4af0f41                           // imul    eax, r12d
	LONG $0x1c518b41                           // mov    edx, dword [r9 + 28]
	LONG $0xd2af0f41                           // imul    edx, r10d
	WORD $0xc201                               // add    edx, eax
	LONG $0x1c408b41                           // mov    eax, dword [r8 + 28]
	LONG $0xc3af0f41                           // imul    eax, r11d
	WORD $0xd001                               // add    eax, edx
	LONG $0x38410148                           // add    qword [rcx + 56], rax
	RET

TEXT ·_sm2P256Mul2Way2(SB), $0-48

	MOVQ tmp+0(FP), DI
	MOVQ a+8(FP), SI
	MOVQ b+16(FP), DX
	MOVQ tmp2+24(FP), CX
	MOVQ a2+32(FP), R8
	MOVQ b2+40(FP), R9

	LONG $0x205e8b44                           // mov    r11d, dword [rsi + 32]
	LONG $0x20508b45                           // mov    r10d, dword [r8 + 32]
	LONG $0x6ef9c1c4; BYTE $0xc2               // vmovq    xmm0, r10
	LONG $0x6ef9c1c4; BYTE $0xcb               // vmovq    xmm1, r11
	LONG $0xc06c71c5                           // vpunpcklqdq    xmm8, xmm1, xmm0
	LONG $0x207a8b44                           // mov    r15d, dword [rdx + 32]
	LONG $0x20718b45                           // mov    r14d, dword [r9 + 32]
	LONG $0x6ef9c1c4; BYTE $0xc6               // vmovq    xmm0, r14
	LONG $0x6ef9c1c4; BYTE $0xcf               // vmovq    xmm1, r15
	LONG $0xe86c71c5                           // vpunpcklqdq    xmm13, xmm1, xmm0
	LONG $0xf411c1c4; BYTE $0xc0               // vpmuludq    xmm0, xmm13, xmm8
	QUAD $0x0000008087d6f9c5                   // vmovq    qword [rdi + 128], xmm0
	QUAD $0x0000808116f9e3c4; WORD $0x0100     // vpextrq    qword [rcx + 128], xmm0, 1
	WORD $0x468b; BYTE $0x1c                   // mov    eax, dword [rsi + 28]
	LONG $0x1c588b41                           // mov    ebx, dword [r8 + 28]
	LONG $0x6ef9e1c4; BYTE $0xc3               // vmovq    xmm0, rbx
	LONG $0x6ef9e1c4; BYTE $0xc8               // vmovq    xmm1, rax
	LONG $0xd86c71c5                           // vpunpcklqdq    xmm11, xmm1, xmm0
	WORD $0x428b; BYTE $0x1c                   // mov    eax, dword [rdx + 28]
	LONG $0x1c598b41                           // mov    ebx, dword [r9 + 28]
	LONG $0x6ef9e1c4; BYTE $0xc3               // vmovq    xmm0, rbx
	LONG $0x6ef9e1c4; BYTE $0xc8               // vmovq    xmm1, rax
	LONG $0xc86c71c5                           // vpunpcklqdq    xmm9, xmm1, xmm0
	LONG $0xf421c1c4; BYTE $0xc5               // vpmuludq    xmm0, xmm11, xmm13
	LONG $0xf431c1c4; BYTE $0xc8               // vpmuludq    xmm1, xmm9, xmm8
	LONG $0xc0d4f1c5                           // vpaddq    xmm0, xmm1, xmm0
	LONG $0x47d6f9c5; BYTE $0x78               // vmovq    qword [rdi + 120], xmm0
	LONG $0x16f9e3c4; WORD $0x7841; BYTE $0x01 // vpextrq    qword [rcx + 120], xmm0, 1
	WORD $0x468b; BYTE $0x18                   // mov    eax, dword [rsi + 24]
	LONG $0x18588b41                           // mov    ebx, dword [r8 + 24]
	LONG $0x6ef9e1c4; BYTE $0xc3               // vmovq    xmm0, rbx
	LONG $0x6ef9e1c4; BYTE $0xc8               // vmovq    xmm1, rax
	LONG $0xd06c71c5                           // vpunpcklqdq    xmm10, xmm1, xmm0
	WORD $0x428b; BYTE $0x18                   // mov    eax, dword [rdx + 24]
	LONG $0x18598b41                           // mov    ebx, dword [r9 + 24]
	LONG $0x6ef9e1c4; BYTE $0xc3               // vmovq    xmm0, rbx
	LONG $0x6ef9e1c4; BYTE $0xc8               // vmovq    xmm1, rax
	LONG $0xf86c71c5                           // vpunpcklqdq    xmm15, xmm1, xmm0
	LONG $0xf429c1c4; BYTE $0xc5               // vpmuludq    xmm0, xmm10, xmm13
	LONG $0xf431c1c4; BYTE $0xcb               // vpmuludq    xmm1, xmm9, xmm11
	LONG $0xc9d4f1c5                           // vpaddq    xmm1, xmm1, xmm1
	LONG $0xf401c1c4; BYTE $0xe0               // vpmuludq    xmm4, xmm15, xmm8
	LONG $0xc4d4f9c5                           // vpaddq    xmm0, xmm0, xmm4
	LONG $0xc0d4f1c5                           // vpaddq    xmm0, xmm1, xmm0
	LONG $0x47d6f9c5; BYTE $0x70               // vmovq    qword [rdi + 112], xmm0
	LONG $0x16f9e3c4; WORD $0x7041; BYTE $0x01 // vpextrq    qword [rcx + 112], xmm0, 1
	WORD $0x468b; BYTE $0x14                   // mov    eax, dword [rsi + 20]
	LONG $0x14588b41                           // mov    ebx, dword [r8 + 20]
	LONG $0x6ef9e1c4; BYTE $0xc3               // vmovq    xmm0, rbx
	LONG $0x6ef9e1c4; BYTE $0xc8               // vmovq    xmm1, rax
	LONG $0xe06c71c5                           // vpunpcklqdq    xmm12, xmm1, xmm0
	LONG $0x146a8b44                           // mov    r13d, dword [rdx + 20]
	LONG $0x14618b45                           // mov    r12d, dword [r9 + 20]
	LONG $0x6ef9c1c4; BYTE $0xc4               // vmovq    xmm0, r12
	LONG $0x6ef9c1c4; BYTE $0xcd               // vmovq    xmm1, r13
	LONG $0xf06c71c5                           // vpunpcklqdq    xmm14, xmm1, xmm0
	LONG $0xf419c1c4; BYTE $0xc5               // vpmuludq    xmm0, xmm12, xmm13
	LONG $0xf429c1c4; BYTE $0xc9               // vpmuludq    xmm1, xmm10, xmm9
	LONG $0xf401c1c4; BYTE $0xe3               // vpmuludq    xmm4, xmm15, xmm11
	LONG $0xc9d4d9c5                           // vpaddq    xmm1, xmm4, xmm1
	LONG $0xf409c1c4; BYTE $0xe0               // vpmuludq    xmm4, xmm14, xmm8
	LONG $0xc4d4f9c5                           // vpaddq    xmm0, xmm0, xmm4
	LONG $0xc0d4f1c5                           // vpaddq    xmm0, xmm1, xmm0
	LONG $0x47d6f9c5; BYTE $0x68               // vmovq    qword [rdi + 104], xmm0
	LONG $0x16f9e3c4; WORD $0x6841; BYTE $0x01 // vpextrq    qword [rcx + 104], xmm0, 1
	WORD $0x5e8b; BYTE $0x10                   // mov    ebx, dword [rsi + 16]
	LONG $0x10408b41                           // mov    eax, dword [r8 + 16]
	LONG $0x6ef9e1c4; BYTE $0xc0               // vmovq    xmm0, rax
	LONG $0x6ef9e1c4; BYTE $0xcb               // vmovq    xmm1, rbx
	LONG $0xd86cf1c5                           // vpunpcklqdq    xmm3, xmm1, xmm0
	LONG $0x10698b41                           // mov    ebp, dword [r9 + 16]
	LONG $0x6ef9e1c4; BYTE $0xc5               // vmovq    xmm0, rbp
	WORD $0x6a8b; BYTE $0x10                   // mov    ebp, dword [rdx + 16]
	LONG $0x6ef9e1c4; BYTE $0xcd               // vmovq    xmm1, rbp
	LONG $0xc06cf1c5                           // vpunpcklqdq    xmm0, xmm1, xmm0
	LONG $0xf419c1c4; BYTE $0xc9               // vpmuludq    xmm1, xmm12, xmm9
	LONG $0xf409c1c4; BYTE $0xe3               // vpmuludq    xmm4, xmm14, xmm11
	LONG $0xc9d4d9c5                           // vpaddq    xmm1, xmm4, xmm1
	LONG $0xc9d4f1c5                           // vpaddq    xmm1, xmm1, xmm1
	LONG $0xe3f491c5                           // vpmuludq    xmm4, xmm13, xmm3
	LONG $0xf401c1c4; BYTE $0xf2               // vpmuludq    xmm6, xmm15, xmm10
	LONG $0xe4d4c9c5                           // vpaddq    xmm4, xmm6, xmm4
	LONG $0xf0f4b9c5                           // vpmuludq    xmm6, xmm8, xmm0
	LONG $0xe6d4d9c5                           // vpaddq    xmm4, xmm4, xmm6
	LONG $0xccd4f1c5                           // vpaddq    xmm1, xmm1, xmm4
	LONG $0x4fd6f9c5; BYTE $0x60               // vmovq    qword [rdi + 96], xmm1
	LONG $0x16f9e3c4; WORD $0x6049; BYTE $0x01 // vpextrq    qword [rcx + 96], xmm1, 1
	LONG $0x0c688b41                           // mov    ebp, dword [r8 + 12]
	LONG $0x6ef9e1c4; BYTE $0xcd               // vmovq    xmm1, rbp
	WORD $0x6e8b; BYTE $0x0c                   // mov    ebp, dword [rsi + 12]
	LONG $0x6ef9e1c4; BYTE $0xe5               // vmovq    xmm4, rbp
	LONG $0xe16cd9c5                           // vpunpcklqdq    xmm4, xmm4, xmm1
	LONG $0x0c698b41                           // mov    ebp, dword [r9 + 12]
	LONG $0x6ef9e1c4; BYTE $0xcd               // vmovq    xmm1, rbp
	WORD $0x6a8b; BYTE $0x0c                   // mov    ebp, dword [rdx + 12]
	LONG $0x6ef9e1c4; BYTE $0xf5               // vmovq    xmm6, rbp
	LONG $0xc96cc9c5                           // vpunpcklqdq    xmm1, xmm6, xmm1
	LONG $0xf4f491c5                           // vpmuludq    xmm6, xmm13, xmm4
	LONG $0xd3f4b1c5                           // vpmuludq    xmm2, xmm9, xmm3
	LONG $0xf419c1c4; BYTE $0xff               // vpmuludq    xmm7, xmm12, xmm15
	LONG $0xf409c1c4; BYTE $0xea               // vpmuludq    xmm5, xmm14, xmm10
	LONG $0xefd4d1c5                           // vpaddq    xmm5, xmm5, xmm7
	LONG $0xf8f4a1c5                           // vpmuludq    xmm7, xmm11, xmm0
	LONG $0xd7d4e9c5                           // vpaddq    xmm2, xmm2, xmm7
	LONG $0xd2d4d1c5                           // vpaddq    xmm2, xmm5, xmm2
	LONG $0xe9f4b9c5                           // vpmuludq    xmm5, xmm8, xmm1
	LONG $0xedd4c9c5                           // vpaddq    xmm5, xmm6, xmm5
	LONG $0xd5d4e9c5                           // vpaddq    xmm2, xmm2, xmm5
	LONG $0x57d6f9c5; BYTE $0x58               // vmovq    qword [rdi + 88], xmm2
	LONG $0x16f9e3c4; WORD $0x5851; BYTE $0x01 // vpextrq    qword [rcx + 88], xmm2, 1
	LONG $0x08688b41                           // mov    ebp, dword [r8 + 8]
	LONG $0x6ef9e1c4; BYTE $0xd5               // vmovq    xmm2, rbp
	WORD $0x6e8b; BYTE $0x08                   // mov    ebp, dword [rsi + 8]
	LONG $0x6ef9e1c4; BYTE $0xed               // vmovq    xmm5, rbp
	LONG $0x08698b41                           // mov    ebp, dword [r9 + 8]
	LONG $0x6ef9e1c4; BYTE $0xf5               // vmovq    xmm6, rbp
	WORD $0x6a8b; BYTE $0x08                   // mov    ebp, dword [rdx + 8]
	LONG $0x6ef9e1c4; BYTE $0xfd               // vmovq    xmm7, rbp
	LONG $0xd26cd1c5                           // vpunpcklqdq    xmm2, xmm5, xmm2
	LONG $0xee6cc1c5                           // vpunpcklqdq    xmm5, xmm7, xmm6
	LONG $0xf4f4b1c5                           // vpmuludq    xmm6, xmm9, xmm4
	LONG $0xf409c1c4; BYTE $0xfc               // vpmuludq    xmm7, xmm14, xmm12
	LONG $0xf7d4c9c5                           // vpaddq    xmm6, xmm6, xmm7
	LONG $0xf9f4a1c5                           // vpmuludq    xmm7, xmm11, xmm1
	LONG $0xf7d4c9c5                           // vpaddq    xmm6, xmm6, xmm7
	LONG $0xf6d449c5                           // vpaddq    xmm14, xmm6, xmm6
	LONG $0xfaf491c5                           // vpmuludq    xmm7, xmm13, xmm2
	LONG $0xf3f481c5                           // vpmuludq    xmm6, xmm15, xmm3
	LONG $0xd8f4a9c5                           // vpmuludq    xmm3, xmm10, xmm0
	LONG $0xded4e1c5                           // vpaddq    xmm3, xmm3, xmm6
	LONG $0xdfd4e1c5                           // vpaddq    xmm3, xmm3, xmm7
	LONG $0xf5f4b9c5                           // vpmuludq    xmm6, xmm8, xmm5
	LONG $0xded4e1c5                           // vpaddq    xmm3, xmm3, xmm6
	LONG $0xdbd489c5                           // vpaddq    xmm3, xmm14, xmm3
	LONG $0x5fd6f9c5; BYTE $0x50               // vmovq    qword [rdi + 80], xmm3
	LONG $0x16f9e3c4; WORD $0x5059; BYTE $0x01 // vpextrq    qword [rcx + 80], xmm3, 1
	LONG $0xd2f4b1c5                           // vpmuludq    xmm2, xmm9, xmm2
	LONG $0xdcf481c5                           // vpmuludq    xmm3, xmm15, xmm4
	LONG $0xc0f499c5                           // vpmuludq    xmm0, xmm12, xmm0
	LONG $0xc0d4e1c5                           // vpaddq    xmm0, xmm3, xmm0
	LONG $0xc9f4a9c5                           // vpmuludq    xmm1, xmm10, xmm1
	LONG $0xcad4f1c5                           // vpaddq    xmm1, xmm1, xmm2
	LONG $0xc1d4f9c5                           // vpaddq    xmm0, xmm0, xmm1
	LONG $0xcdf4a1c5                           // vpmuludq    xmm1, xmm11, xmm5
	LONG $0xc1d4f9c5                           // vpaddq    xmm0, xmm0, xmm1
	LONG $0x47d6f9c5; BYTE $0x48               // vmovq    qword [rdi + 72], xmm0
	LONG $0x16f9e3c4; WORD $0x4841; BYTE $0x01 // vpextrq    qword [rcx + 72], xmm0, 1
	WORD $0x768b; BYTE $0x04                   // mov    esi, dword [rsi + 4]
	LONG $0xf7af0f41                           // imul    esi, r15d
	LONG $0xddaf0f41                           // imul    ebx, r13d
	WORD $0xf301                               // add    ebx, esi
	WORD $0x528b; BYTE $0x04                   // mov    edx, dword [rdx + 4]
	LONG $0xd3af0f41                           // imul    edx, r11d
	WORD $0xda01                               // add    edx, ebx
	LONG $0x48570148                           // add    qword [rdi + 72], rdx
	LONG $0x04508b41                           // mov    edx, dword [r8 + 4]
	LONG $0xd6af0f41                           // imul    edx, r14d
	LONG $0xc4af0f41                           // imul    eax, r12d
	WORD $0xd001                               // add    eax, edx
	LONG $0x04518b41                           // mov    edx, dword [r9 + 4]
	LONG $0xd2af0f41                           // imul    edx, r10d
	WORD $0xc201                               // add    edx, eax
	LONG $0x48510148                           // add    qword [rcx + 72], rdx
	RET
